// Copyright Â©2017-2023 by Richard A. Wilkes. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, version 2.0. If a copy of the MPL was not distributed with
// this file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// This Source Code Form is "Incompatible With Secondary Licenses", as
// defined by the Mozilla Public License, version 2.0.

package names

import (
	"strings"

	"github.com/richardwilkes/toolbox/txt"
	"github.com/richardwilkes/toolbox/xmath/rand"
)

var _ Namer = &CompoundNamer{}

// CompoundNamer provides a name generator that combines multiple other name generators.
type CompoundNamer struct {
	namers    []Namer
	separator string
	lowered   bool
}

// NewCompoundNamer creates a new CompoundNamer. The 'separator' will be placed between each name generated by the
// 'namers'. If 'lowered' is true, then only the first letter of the result will be capitalized, otherwise each name
// generated by the 'namers' will be left as-is.
func NewCompoundNamer(separator string, lowered bool, namers ...Namer) *CompoundNamer {
	return &CompoundNamer{namers: namers, separator: separator, lowered: lowered}
}

// GenerateName generates a new random name.
func (n *CompoundNamer) GenerateName() string {
	return n.GenerateNameWithRandomizer(rand.NewCryptoRand())
}

// GenerateNameWithRandomizer generates a new random name using the specified randomizer.
func (n *CompoundNamer) GenerateNameWithRandomizer(rnd rand.Randomizer) string {
	var buffer strings.Builder
	for i, namer := range n.namers {
		if i != 0 {
			buffer.WriteString(n.separator)
		}
		name := namer.GenerateNameWithRandomizer(rnd)
		if n.lowered {
			name = strings.ToLower(name)
		}
		buffer.WriteString(name)
	}
	return txt.FirstToUpper(buffer.String())
}
